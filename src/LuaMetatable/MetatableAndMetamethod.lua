---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by galax.
--- DateTime: 6/7/2020 2:43 AM
---

--[[Get and set metatable --]]

--t = {}
--print(getmetatable(t))
--
--t1 = {}
--setmetatable(t, t1)
--print(getmetatable(t) == t1)

Set = {}
local mt = {}

function Set.new(l)
    local set = {}
    setmetatable(set, mt)
    for _, v in pairs(l) do
        set[v] = true
    end
    return set
end

function Set.union(a,b)
    if getmetatable(a) ~= mt or getmetatable(b) ~= mt then
        error("metatable error.")
    end

    local retSet = Set.new{}
    for v in pairs(a) do
        retSet[v] = true
    end
    for v in pairs(b) do
        retSet[v] = true
    end
    return retSet
end

function Set.intersection(a,b)
    local retSet = Set.new{}
    for v in pairs(a) do
        retSet[v] = b[v]
    end
    return retSet

end

function Set.tostring(set)
    local tb = {}
    for e in pairs(set) do
        tb[#tb+1] = e
    end
    return "{"..table.concat(tb,", ").."}"
end

function Set.print(s)
    print(Set.tostring(s))
end


local set1 = Set.new({10,20,30})
local set2 = Set.new({1,2})
print(getmetatable(set1))
print(getmetatable(set2))
mt.__add = Set.union
local set3 = set1 + set2
--local set3 = Set.union(set1, set2)
Set.print(set3)